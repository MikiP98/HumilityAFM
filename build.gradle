// Imports required for the 'doLast' entry in 'processResources'
import groovy.json.JsonSlurper
import groovy.json.JsonOutput

plugins {
	id 'fabric-loom' version "${loom_version}"
	id 'maven-publish'
}

version = "${project.mod_version}-mc${project.minecraft_version}"
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	
	maven { url "https://maven.shedaniel.me/" }
	maven { url "https://maven.terraformersmc.com/releases/" }

	exclusiveContent {
		forRepository {
			maven {
				name = "Modrinth"
				url = "https://api.modrinth.com/maven"
			}
		}
		filter {
			includeGroup "maven.modrinth"
		}
	}

	// Required for 'polymorph'
	maven {
		name = 'Ladysnake Mods'
		url = 'https://maven.ladysnake.org/releases'
	}
}

loom {
    splitEnvironmentSourceSets()

	mods {
		"humility-afm" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}
}

fabricApi {
	configureDataGeneration() {
		modId = "humility-afm"
	}
}

dependencies {
	// Lombok for annotations like @Getter, @Setter, etc.
	compileOnly 'org.projectlombok:lombok:1.18.32'
	annotationProcessor 'org.projectlombok:lombok:1.18.32'

	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modApi("me.shedaniel.cloth:cloth-config-fabric:${project.config2_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}
	modApi "com.terraformersmc:modmenu:${project.modmenu_version}"

	modRuntimeOnly "maven.modrinth:polymorph:${project.polymorph_version}"  // Required for Datagen to not fail
	runtimeOnly group: 'com.electronwill.night-config', name: 'core', version: '3.7.4'  // Required for 'polymorph'
	modRuntimeOnly "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${polymorph_cca_version}"  // Required for 'polymorph'
	modRuntimeOnly "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${polymorph_cca_version}"  // Required for 'polymorph'
	modRuntimeOnly "dev.onyxstudios.cardinal-components-api:cardinal-components-block:${polymorph_cca_version}"  // Required for 'polymorph'
	modRuntimeOnly "dev.onyxstudios.cardinal-components-api:cardinal-components-item:${polymorph_cca_version}"  // Required for 'polymorph'
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}

	doLast {
		// Minify JSON files to reduce the mod size a bit
		fileTree("$buildDir/resources/main")
				.matching { include "**/*.json" }
				.forEach { File f ->
					def json = new JsonSlurper().parse(f)
					f.text = JsonOutput.toJson(json) // minified form
				}
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}
tasks.named('processResources') {
	duplicatesStrategy = DuplicatesStrategy.INCLUDE
}


java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	// withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${project.base.archivesName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

// Additional task that recompresses the generated JARs using python-zopfli to reduce the file size
tasks.register("recompressJars", Exec) {
	group = "build"
	description = "Recompress JARs in ./build/libs using python-zopfli"

	workingDir = projectDir
	executable = "python"
	args = ["jar_recompressor.py"]
}

// Run the 'recompressJars' task after the 'build' task
tasks.named("build") {
	finalizedBy("recompressJars")
}